#include "token.h"

using namespace avs8086::token;

const QHash<QString, Token::Type> Token::sm_mnemonics = {
#if 1
    { "MAKE_BIN",           MAKE_X },
    { "MAKE_COM",           MAKE_X },
    { "MAKE_EXE",           MAKE_X },
    { "LOAD_SEGMENT",       LOAD_X },
    { "LOAD_OFFSET",        LOAD_X },
    { "ES",                 SREG },
    { "CS",                 SREG },
    { "SS",                 SREG },
    { "DS",                 SREG },
    { "AL",                 REG8 },
    { "CL",                 REG8 },
    { "DL",                 REG8 },
    { "BL",                 REG8 },
    { "AH",                 REG8 },
    { "CH",                 REG8 },
    { "DH",                 REG8 },
    { "BH",                 REG8 },
    { "AX",                 REG16 },
    { "CX",                 REG16 },
    { "DX",                 REG16 },
    { "BX",                 REG16 },
    { "SP",                 REG16 },
    { "BP",                 REG16 },
    { "SI",                 REG16 },
    { "DI",                 REG16 },
    { "IP",                 REG16 },
    { "DB",                 ALLOCATE },
    { "DW",                 ALLOCATE },
    { "DD",                 ALLOCATE },
    { "DQ",                 ALLOCATE },
    { "DT",                 ALLOCATE },
#endif
    { "MOV",                MOV },
    { "PUSH",               PUSH },
    { "POP",                POP },
    { "XCHG",               XCHG },
    { "XLAT",               XLAT },
    { "LEA",                LEA },
    { "LDS",                LDS },
    { "LES",                LES },
    { "LAHF",               LAHF },
    { "SAHF",               SAHF },
    { "PUSHF",              PUSHF },
    { "POPF",               POPF },
    { "IN",                 IN },
    { "OUT",                OUT },
    { "ADD",                ADD },
    { "ADC",                ADC },
    { "INC",                INC },
    { "SUB",                SUB },
    { "SBB",                SBB },
    { "DEC",                DEC },
    { "NEG",                NEG },
    { "CMP",                CMP },
    { "MUL",                MUL },
    { "IMUL",               IMUL },
    { "DIV",                DIV },
    { "IDIV",               IDIV },
    { "CBW",                CBW },
    { "CWD",                CWD },
    { "AAA",                AAA },
    { "DAA",                DAA },
    { "AAS",                AAS },
    { "DAS",                DAS },
    { "AAM",                AAM },
    { "AAD",                AAD },
    { "AND",                AND },
    { "OR",                 OR },
    { "XOR",                XOR },
    { "NOT",                NOT },
    { "TEST",               TEST },
    { "SAL",                SAL },
    { "SAR",                SAR },
    { "SHL",                SHL },
    { "SHR",                SHR },
    { "ROL",                ROL },
    { "ROR",                ROR },
    { "RCL",                RCL },
    { "RCR",                RCR },
    { "MOVSB",              MOVSB },
    { "MOVSW",              MOVSW },
    { "CMPSB",              CMPSB },
    { "CMPSW",              CMPSW },
    { "SCASB",              SCASB },
    { "SCASW",              SCASW },
    { "LODSB",              LODSB },
    { "LODSW",              LODSW },
    { "STOSB",              STOSB },
    { "STOSW",              STOSW },
    { "REP",                REP },
    { "REPE",               REPE },
    { "REPZ",               REPZ },
    { "REPNE",              REPNE },
    { "REPNZ",              REPNZ },
    { "CALL",               CALL },
    { "RET",                RET },
    { "JMP",                JMP },
    { "JA",                 JA },
    { "JNBE",               JNBE },
    { "JAE",                JAE },
    { "JNB",                JNB },
    { "JB",                 JB },
    { "JNAE",               JNAE },
    { "JBE",                JBE },
    { "JNA",                JNA },
    { "JC",                 JC },
    { "JNC",                JNC },
    { "JE",                 JE },
    { "JZ",                 JZ },
    { "JNE",                JNE },
    { "JNZ",                JNZ },
    { "JG",                 JG },
    { "JNLE",               JNLE },
    { "JGE",                JGE },
    { "JNL",                JNL },
    { "JL",                 JL },
    { "JNGE",               JNGE },
    { "JLE",                JLE },
    { "JNG",                JNG },
    { "JO",                 JO },
    { "JNO",                JNO },
    { "JNP",                JNP },
    { "JPO",                JPO },
    { "JP",                 JP },
    { "JPE",                JPE },
    { "JNS",                JNS },
    { "JS",                 JS },
    { "LOOP",               LOOP },
    { "LOOPE",              LOOPE },
    { "LOOPZ",              LOOPZ },
    { "LOOPNE",             LOOPNE },
    { "LOOPNZ",             LOOPNZ },
    { "JCXZ",               JCXZ },
    { "INT",                INT },
    { "INTO",               INTO },
    { "IRET",               IRET },
    { "CLC",                CLC },
    { "STC",                STC },
    { "CMC",                CMC },
    { "CLD",                CLD },
    { "STD",                STD },
    { "CLI",                CLI },
    { "STI",                STI },
    { "WAIT",               WAIT },
    { "ESC",                ESC },
    { "LOCK",               LOCK },
    { "HLT",                HLT },
    { "NOP",                NOP },

    { "INCLUDE",            INCLUDE },
    { "ORG",                ORG },
    { "EQU",                EQU },
    { "DUP",                DUP },

    { "PTR",                PTR },
    { "SHORT",              SHORT },
    { "NEAR",               NEAR },
    { "FAR",                FAR },
    { "WORD",               WORD },
    { "DWORD",              DWORD },

    { "SEGMENT",            SEGMENT },
    { "ENDS",               ENDS },
    { "END",                END },

    { "PROC",               PROC }, // PROC NEAR/FAR
};

/* ========================================================================== */

#if 0
const QSet<QString> Token::sm_makes = {
    "MAKE_BIN", "MAKE_COM", "MAKE_EXE",
};

const QSet<QString> Token::sm_loads = {
    "LOAD_SEGMENT", "LOAD_OFFSET",
};

const QSet<QString> Token::sm_sregs = {
    "ES", "CS", "SS", "DS",
};

const QSet<QString> Token::sm_reg8s = {
    "AL", "CL", "DL", "BL", "AH", "CH", "DH", "BH",
};

const QSet<QString> Token::sm_reg16s = {
    "AX", "CX", "DX", "BX", "SP", "BP", "SI", "DI", "IP",
};

const QSet<QString> Token::sm_defs = {
    "DB", "DW", "DD", "DQ", "DT",
};

const QHash<const QSet<QString>*, Token::Type> Token::sm_setTypes = {
    { &sm_makes,            MAKE_X },
    { &sm_loads,            LOAD_X },
    { &sm_sregs,            SREG },
    { &sm_reg8s,            REG8 },
    { &sm_reg16s,           REG16 },
    { &sm_defs,             DEF },
};
#endif
