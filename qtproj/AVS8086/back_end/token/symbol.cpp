#include "token/token.h"

using namespace avs8086::token;

const QMap<Token::Type, QString> Token::sm_symbols_A = {
    { TOKEN_EOF,          "EOF" },
    { LINE_BREAK,         "\\Line Break" },
    { ANNOTATION,         ";Annotation" },
    { BIT_NOT,            "~" },
    { ASTERISK,           "*" },
    { SLASH,              "/" },
    { MODULO,             "%" },
    { PLUS,               "+" },
    { MINUS,              "-" },
    { LEFT_SHIFT,         "<<" },
    { RIGHT_SHIFT,        ">>" },
    { BIT_AND,            "&" },
    { BIT_XOR,            "^" },
    { BIT_OR,             "|" },
    { LT,                 "<" },
    { GT,                 ">" },
    { LE,                 "<=" },
    { GE,                 ">=" },
    { EQ,                 "==" },
    { NE,                 "!=" },
    { ASSIGN,             "=" },
    { COMMA,              "," },
    { COLON,              ":" },
    { QUESTION,           "?" },
    { DOLLAR,             "$" },
    { WELL,               "#" },
    { LPAREN,             "(" },
    { RPAREN,             ")" },
    { LSQUARE,            "[" },
    { RSQUARE,            "]" },
};

const QMap<QString, Token::Type> Token::sm_symbols_B = {
    { "",               TOKEN_EOF },
    { ";",              ANNOTATION },
    { "~",              BIT_NOT },
    { "*",              ASTERISK },
    { "/",              SLASH },
    { "%",              MODULO },
    { "+",              PLUS },
    { "-",              MINUS },
    { "&",              BIT_AND },
    { "^",              BIT_XOR },
    { "|",              BIT_OR },
    { "<",              LT },
    { ">",              GT },
    { "=",              ASSIGN },
    { ",",              COMMA },
    { ":",              COLON },
    { "?",              QUESTION },
    { "$",              DOLLAR },
    { "#",              WELL },
    { "(",              LPAREN },
    { ")",              RPAREN },
    { "[",              LSQUARE },
    { "]",              RSQUARE },
};

const QMap<QString, Token::Type> Token::sm_symbols_C = {
    { "<<",             LEFT_SHIFT },
    { ">>",             RIGHT_SHIFT },
    { "<=",             LE },
    { ">=",             GE },
    { "==",             EQ },
    { "!=",             NE },
};
