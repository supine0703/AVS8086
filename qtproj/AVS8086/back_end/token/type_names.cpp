#include "token/token.h"

using namespace avs8086::token;

const QString Token::sm_illegalName = "Illegal";

const QHash<Token::Type, QString> Token::sm_typeNames = {
    { TOKEN_EOF,            "EOF" },
    { LINE_BREAK,           "Line Break \\" },
    { ANNOTATION,           "Annotation ;" },
    { BIT_NOT,              "Bit Not ~" },
    { ASTERISK,             "Asterisk *" },
    { SLASH,                "Slash /" },
    { MODULO,               "Modulo %" },
    { PLUS,                 "Plus +" },
    { MINUS,                "Minus -" },
    { LEFT_SHIFT,           "Left Shift <<" },
    { RIGHT_SHIFT,          "Right Shift >>" },
    { BIT_AND,              "Bit And &" },
    { BIT_XOR,              "Bit Xor ^" },
    { BIT_OR,               "Bit Or |" },
    { LT,                   "LT <" },
    { GT,                   "GT >" },
    { LE,                   "LE <=" },
    { GE,                   "GE >=" },
    { EQ,                   "EQ ==" },
    { NE,                   "NE !=" },
    { ASSIGN,               "Assign =" },
    { COMMA,                "Comma ," },
    { COLON,                "Colon :" },
    { QUESTION,             "Question ?" },
    { DOLLAR,               "Dollar $" },
    { WELL,                 "Well #" },
    { LPAREN,               "Left Paren (" },
    { RPAREN,               "Right Paren )" },
    { LSQUARE,              "Left Square [" },
    { RSQUARE,              "Right Square ]" },

    { IDENTIFIER,           "Identifier" },
    { REG8,                 "Register 8bit" },
    { REG16,                "Register 16bit" },
    { SREG,                 "Segment Register" },
    { STRING,               "String"},
    { INTEGER,              "Integer" },
    { FLOAT,                "Float" },
    { MAKE_X,               "MAKE_X" },
    { LOAD_X,               "LOAD_X" },

    { MOV,                  "MOV" },
    { PUSH,                 "PUSH" },
    { POP,                  "POP" },
    { XCHG,                 "XCHG" },
    { XLAT,                 "XLAT" },
    { LEA,                  "LEA" },
    { LDS,                  "LDS" },
    { LES,                  "LES" },
    { LAHF,                 "LAHF" },
    { SAHF,                 "SAHF" },
    { PUSHF,                "PUSHF" },
    { POPF,                 "POPF" },
    { IN,                   "IN" },
    { OUT,                  "OUT" },
    { ADD,                  "ADD" },
    { ADC,                  "ADC" },
    { INC,                  "INC" },
    { SUB,                  "SUB" },
    { SBB,                  "SBB" },
    { DEC,                  "DEC" },
    { NEG,                  "NEG" },
    { CMP,                  "CMP" },
    { MUL,                  "MUL" },
    { IMUL,                 "IMUL" },
    { DIV,                  "DIV" },
    { IDIV,                 "IDIV" },
    { CBW,                  "CBW" },
    { CWD,                  "CWD" },
    { AAA,                  "AAA" },
    { DAA,                  "DAA" },
    { AAS,                  "AAS" },
    { DAS,                  "DAS" },
    { AAM,                  "AAM" },
    { AAD,                  "AAD" },
    { AND,                  "AND" },
    { OR,                   "OR" },
    { XOR,                  "XOR" },
    { NOT,                  "NOT" },
    { TEST,                 "TEST" },
    { SAL,                  "SAL" },
    { SAR,                  "SAR" },
    { SHL,                  "SHL" },
    { SHR,                  "SHR" },
    { ROL,                  "ROL" },
    { ROR,                  "ROR" },
    { RCL,                  "RCL" },
    { RCR,                  "RCR" },
    { MOVSB,                "MOVSB" },
    { MOVSW,                "MOVSW" },
    { CMPSB,                "CMPSB" },
    { CMPSW,                "CMPSW" },
    { SCASB,                "SCASB" },
    { SCASW,                "SCASW" },
    { LODSB,                "LODSB" },
    { LODSW,                "LODSW" },
    { STOSB,                "STOSB" },
    { STOSW,                "STOSW" },
    { REP,                  "REP" },
    { REPE,                 "REPE" },
    { REPZ,                 "REPZ" },
    { REPNE,                "REPNE" },
    { REPNZ,                "REPNZ" },
    { CALL,                 "CALL" },
    { RET,                  "RET" },
    { JMP,                  "JMP" },
    { JA,                   "JA" },
    { JNBE,                 "JNBE" },
    { JAE,                  "JAE" },
    { JNB,                  "JNB" },
    { JB,                   "JB" },
    { JNAE,                 "JNAE" },
    { JBE,                  "JBE" },
    { JNA,                  "JNA" },
    { JC,                   "JC" },
    { JNC,                  "JNC" },
    { JE,                   "JE" },
    { JZ,                   "JZ" },
    { JNE,                  "JNE" },
    { JNZ,                  "JNZ" },
    { JG,                   "JG" },
    { JNLE,                 "JNLE" },
    { JGE,                  "JGE" },
    { JNL,                  "JNL" },
    { JL,                   "JL" },
    { JNGE,                 "JNGE" },
    { JLE,                  "JLE" },
    { JNG,                  "JNG" },
    { JO,                   "JO" },
    { JNO,                  "JNO" },
    { JNP,                  "JNP" },
    { JPO,                  "JPO" },
    { JP,                   "JP" },
    { JPE,                  "JPE" },
    { JNS,                  "JNS" },
    { JS,                   "JS" },
    { LOOP,                 "LOOP" },
    { LOOPE,                "LOOPE" },
    { LOOPZ,                "LOOPZ" },
    { LOOPNE,               "LOOPNE" },
    { LOOPNZ,               "LOOPNZ" },
    { JCXZ,                 "JCXZ" },
    { INT,                  "INT" },
    { INTO,                 "INTO" },
    { IRET,                 "IRET" },
    { CLC,                  "CLC" },
    { STC,                  "STC" },
    { CMC,                  "CMC" },
    { CLD,                  "CLD" },
    { STD,                  "STD" },
    { CLI,                  "CLI" },
    { STI,                  "STI" },
    { WAIT,                 "WAIT" },
    { ESC,                  "ESC" },
    { LOCK,                 "LOCK" },
    { HLT,                  "HLT" },
    { NOP,                  "NOP" },

    { INCLUDE,              "INCLUDE" },
    { ORG,                  "ORG" },
    { EQU,                  "EQU" },
    { DEFINE,                  "DEF" },
    { DUP,                  "DUP" },

    { PTR,                  "PTR" },
    { SHORT,                "SHORT" },
    { NEAR,                 "NEAR" },
    { FAR,                  "FAR" },
    { WORD,                 "WORD" },
    { DWORD,                "DWORD" },

    { SEGMENT,              "SEGMENT" },
    { ENDS,                 "ENDS" },
    { END,                  "END" },
};
